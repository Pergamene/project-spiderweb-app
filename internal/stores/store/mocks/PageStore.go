// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import page "github.com/Pergamene/project-spiderweb-service/internal/models/page"

// PageStore is an autogenerated mock type for the PageStore type
type PageStore struct {
	mock.Mock
}

// CanModifyPage provides a mock function with given fields: pageGUID, userID
func (_m *PageStore) CanModifyPage(pageGUID string, userID string) (bool, error) {
	ret := _m.Called(pageGUID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pageGUID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pageGUID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePage provides a mock function with given fields: record, ownerID
func (_m *PageStore) CreatePage(record page.Page, ownerID string) (page.Page, error) {
	ret := _m.Called(record, ownerID)

	var r0 page.Page
	if rf, ok := ret.Get(0).(func(page.Page, string) page.Page); ok {
		r0 = rf(record, ownerID)
	} else {
		r0 = ret.Get(0).(page.Page)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(page.Page, string) error); ok {
		r1 = rf(record, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePage provides a mock function with given fields: record
func (_m *PageStore) UpdatePage(record page.Page) error {
	ret := _m.Called(record)

	var r0 error
	if rf, ok := ret.Get(0).(func(page.Page) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
